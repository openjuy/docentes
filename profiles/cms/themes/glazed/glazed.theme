<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */


/**
 * Implements hook_library_info_alter().
 *
 * Replaces style sheets declared in libraries with color-altered style sheets.
 */
function glazed_library_info_alter(&$libraries, $extension) {
  if ($extension == 'bootstrap') {
    // Bootstrap < 3.11
    if (isset($libraries['theme']['css']['base'])) {
      foreach($libraries['theme']['css']['base'] as $key => $value){
        if(strpos($key, 'overrides.min.css')){
          unset($libraries['theme']['css']['base'][$key]);
        }
      }
    }
    elseif (isset($libraries['framework']['css']['base'])) {
      // Bootstrap 3.11+
      foreach($libraries['framework']['css']['base'] as $key => $value){
        if(strpos($key, 'overrides.min.css')){
          unset($libraries['framework']['css']['base'][$key]);
        }
      }
    }
  }
  if ($extension == 'glazed') {
    // If bootstrap basetheme is not loading bootstrap from CDN load it locally
    // Manage glazed themesettings CSS
    $current_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    $key = 'public://glazed/css/themesettings-' . $current_theme . '.css';
    if (\Drupal::service('file_system')->realpath($key)) {
      $libraries['global-styling']['css']['theme'][$key] = array('minified' => FALSE, 'weight' => 5);
    }
    // Subthemes glazed.css
    if ($current_theme !== 'glazed') {
      // Subthemes carry their own copy of glazed.css, disable glazed/css/glazed.css
      unset($libraries['global-styling']['css']['theme']['css/glazed.css']);
    }
  }
}

/**
 * Prepares variables for the html template. Adds node object.
 *
 * Default template: html.html.twig.
 *
 * See the html.html.twig template for the list of variables.
 */
function glazed_preprocess_html(&$variables) {
    // If bootstrap basetheme is not loading bootstrap from CDN load it locally
    // This is default behavior starting from Glazed 8.x-1.1.3 and 7.x-2.7.3
    $bootstrap_cdn = theme_get_setting('cdn_provider');
    if (!$bootstrap_cdn) {
      $variables['#attached']['library'][] = 'glazed/bootstrap3';
    }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['node'] = $node;
  }

  // Load Sooper Features Controllers
  foreach (file_scan_directory(drupal_get_path('theme', 'glazed') . '/features', '/controller.inc/i') as $file) {
    require_once($file->uri);
  }

  if ($custom_js = theme_get_setting('custom_javascript_site')) {
    $custom_js = \Drupal\Core\Render\Markup::create($custom_js);
    $variables['page_bottom']['custom_javascript_site'] = [
      '#markup' => $custom_js,
    ];
  }
  $variables['page_bottom']['custom_javascript'] = [
    '#markup' => '<div class="hidden" id="glazed-js-seed">sfy39587stp16</div>',
  ];

  if($header_height = theme_get_setting('header_top_height')) {
    $variables['#attached']['drupalSettings']['glazedSettings']['headerHeight'] = $header_height;
  }

  if($header_scroll_offset = theme_get_setting('header_top_height_sticky_offset')) {
    $variables['#attached']['drupalSettings']['glazedSettings']['headerOffset'] = $header_scroll_offset;
  }

  // Fixed mobile header
  if($header_mobile_fixed = theme_get_setting('header_mobile_fixed')) {
    $variables['#attached']['drupalSettings']['glazedSettings']['headerMobileFixed'] = $header_mobile_fixed;
  }
  // Mobile header height
  if($header_mobile_height = theme_get_setting('header_mobile_height')) {
    $variables['#attached']['drupalSettings']['glazedSettings']['headerMobileHeight'] = $header_mobile_height;
  }

  if($header_menu_direction = theme_get_setting('header_side_direction')) {
    $variables['#attached']['drupalSettings']['glazedSettings']['headerSideDirection'] = $header_menu_direction;
  }
}

/**
 * Implements template_preprocess_page()
 */
function glazed_preprocess_page(&$variables) {
  $hide_regions = $local_hide = [];
  if (theme_get_setting('hidden_regions') && !empty(array_keys(array_filter(theme_get_setting('hidden_regions'))))) {
    $hide_regions = array_keys(array_filter(theme_get_setting('hidden_regions')));
  }
  if (!empty($variables['node'])
    && method_exists($variables['node'], 'hasField')
    && $variables['node']->hasField('field_glazed_hide_regions')
    && $variables['node']->get('field_glazed_hide_regions')) {
    $local_hide = array_column($variables['node']->get('field_glazed_hide_regions')->getValue(), 'value');
    $hide_regions = array_unique(array_merge($hide_regions, $local_hide));
  }
  if (in_array('navigation', $hide_regions)) {
    $hide_regions[] = 'navigation_collapsible';
  }
  if (in_array('header', $hide_regions)) {
    $hide_regions[] = 'navigation_collapsible';
    $hide_regions[] = 'navigation';
  }
  foreach ($hide_regions as $value) {
    if (!empty($variables['page'][$value])) {
      unset($variables['page'][$value]);
    }
  }
}

use Drupal\block\Entity\Block;
/**
 * Implements template_preprocess_block()
 */
function glazed_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block) {
      $variables['region'] = $block->getRegion();
    }

  }
}
